# -*- coding: utf-8 -*-
"""data_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SRy1qvJhD1VyBTPvNtsHEmSyR4Fo_dPb
"""

import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
from google.colab import files
import io

# --------------------- Data Precess ---------------------
# Reading death data 2014-2018
# upload from local
uploaded = files.upload()
data_14_18 = pd.read_csv(io.BytesIO(uploaded['Weekly_Counts_of_Deaths_by_State_and_Select_Causes__2014-2018.csv']), 
                         index_col="Week Ending Date", 
                         parse_dates=True)

df_18_shape = data_14_18.shape
print(df_18_shape)

data_14_18.head()

# select columns
df_14_18 = data_14_18.iloc[:, :16]
print(df_14_18)

# rename
df_14_18 = df_14_18.rename(columns={
    "Jurisdiction of Occurrence" : "location",
    "MMWR Year" : "year",
    "MMWR Week" : "week",
    "All  Cause" : "total_death"
})
df_14_18 = df_14_18.rename_axis("date")
df_14_18.head()

# Reading death data 2019-2020
uploaded = files.upload()
data_19_20 = pd.read_csv(io.BytesIO(uploaded['Weekly_Counts_of_Deaths_by_State_and_Select_Causes__2019-2020.csv']), 
                         index_col="Week Ending Date", 
                         parse_dates=True)

df_20_shape = data_19_20.shape
df_20_shape

data_19_20.head()

# select columns
df_19_20 = data_19_20.iloc[:, :18]
print(df_19_20)

# rename
df_19_20 = df_19_20.rename(columns={
    "Jurisdiction of Occurrence" : "location",
    "All Cause" : "total_death",	
    "MMWR Year" : "year",
    "MMWR Week" : "week"
})
df_19_20 = df_19_20.rename_axis("date")
df_19_20.head()

df_19 = df_19_20[df_19_20['year'] == 2019]
df_19 = df_19.iloc[:, :16]
df_20 = df_19_20[df_19_20['year'] == 2020]

# Intergrade the datasets
df_14_19 = pd.concat([df_14_18, df_19], axis=0)
df_14_19.head()

# deal with missing value
percent_missing = df_14_19.isnull().sum() * 100 / len(df_14_19)
missing_value_df = pd.DataFrame({'column_name': df_14_19.columns, 'percent_missing': percent_missing})
print(missing_value_df)

# drop columns with missing > 80%
df_14_19 = df_14_19.drop(['Influenza and pneumonia (J09-J18)'], axis = 1)
df_14_19 = df_14_19.drop('location', axis = 1)

# fill columns with mean values
df_14_19 = df_14_19.fillna(df_14_19.mean())

# Use numpy to convert to arrays
import numpy as np

# Labels are the values we want to predict
labels = np.array(df_14_19['total_death'])

# Remove the labels from the features
# axis 1 refers to the columns
features= df_14_19.drop('total_death', axis = 1)

# Saving feature names for later use
feature_list = list(features.columns)

# Convert to numpy array
features = np.array(features)

# Using Skicit-learn to split data into training and testing sets
from sklearn.model_selection import train_test_split

# Split the data into training and testing sets 75% train and 25% test
train_features, test_features, train_labels, test_labels = train_test_split(df_14_19, labels, test_size = 0.25, random_state = 42)

print('Training Features Shape:', train_features.shape)
print('Training Labels Shape:', train_labels.shape)
print('Testing Features Shape:', test_features.shape)
print('Testing Labels Shape:', test_labels.shape)

# Import the model we are using
from sklearn.ensemble import RandomForestRegressor

# Instantiate model with 1000 decision trees
rf = RandomForestRegressor(n_estimators = 1000, random_state = 52)

# Train the model on training data
rf.fit(train_features, train_labels)

# Use the forest's predict method on the test data
predictions = rf.predict(test_features)

# Calculate the absolute errors
errors = abs(predictions - test_labels)

# Print out the mean absolute error (mae)
print('Mean Absolute Error:', round(np.mean(errors), 2))

# Calculate mean absolute percentage error (MAPE)
mape = 100 * (errors / test_labels)

# Calculate and display accuracy
accuracy = 100 - np.mean(mape)

print('Accuracy:', round(accuracy, 2), '%.')
print(predictions)

df_20 = df_19_20[df_19_20['year'] == 2020]
df_20 = df_20.drop(['Influenza and pneumonia (J09-J18)'], axis = 1)

df20_shape = df_20.shape
df20_shape

df_20['covid_death'] = df_20['COVID-19 (U071, Multiple Cause of Death)']
df_20['noncovid_death'] = df_20['total_death'] - df_20['covid_death']

df_20 = df_20.drop(['COVID-19 (U071, Multiple Cause of Death)'], axis = 1)
df_20 = df_20.drop(['COVID-19 (U071, Underlying Cause of Death)'], axis = 1)

# fill columns with mean values
df_20 = df_20.fillna(df_20.mean())

# Labels are the values we want to predict
actual_noncovid_20 = np.array(df_20['noncovid_death'])
actual_covid_20 = np.array(df_20['covid_death'])
actual_total_20 = np.array(df_20['total_death'])

# Remove the labels from the features
# axis 1 refers to the columns
features_20 = df_20.drop('noncovid_death', axis = 1)
features_20 = df_20.drop('covid_death', axis = 1)
features_20 = df_20.drop('total_death', axis = 1)

# Convert to numpy array
features_20 = np.array(features_20)
features_20 = np.delete(features_20, 0, 1)

# Use the forest's predict method on 2020's data
predictions_20 = rf.predict(features_20)
print(predictions_20)

# compare between prediction_20(noncovid_death) and actual non-covid death
pred_20 = pd.DataFrame(prediction_20)
df_20["pred_20"] = pred_20.iloc[:,0].values

df_20['difference'] = df_20['pred_20'] - df_20['noncovid_death']
print(df_20)

df_20.loc[(df_20["location"] == "United States")].plot.scatter(x="week", y="difference", alpha=0.5, title="Non-covid Nationwide Prediction Difference in 2020")

df_20.loc[(df_20.location == "United States"), ['pred_20','noncovid_death', 'covid_death', 'total_death']].plot(title='Compare Predictions(non-covid) and Actual Death Nationwide', figsize=(16,6))

df_20.loc[(df_20.location == "New York"), ['pred_20','noncovid_death', 'covid_death', 'total_death']].plot(title='Compare Predictions(non-covid) and Actual Death in New York', figsize=(16,6))

df_20.loc[(df_20.location == "California"), ['pred_20','noncovid_death', 'covid_death', 'total_death']].plot(title='Compare Predictions(non-covid) and Actual Death in California State', figsize=(16,6))